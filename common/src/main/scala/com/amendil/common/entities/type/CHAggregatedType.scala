package com.amendil.common.entities.`type`

/**
  * CHAggregatedType contains types that do not exist in ClickHouse
  * those types are used to regroup together different types.
  *
  * For example IP means both IPv4 and IPv6.
  * Rules to aggregate types together can be found in CHTypeMerger.
  */
enum CHAggregatedType(val name: String) extends CHType:
  case Any extends CHAggregatedType("Any")
  case AnyLowCardinalityInnerType extends CHAggregatedType("AnyLowCardinalityInnerType")
  case AnyNonBitmapNonNullableNonLowCardinality extends CHAggregatedType("AnyNonBitmapNonNullableNonLowCardinality")
  case AnyNonMapNonNullableNonLowCardinality extends CHAggregatedType("AnyNonMapNonNullableNonLowCardinality")
  case AnyNullableInnerType extends CHAggregatedType("AnyNullableInnerType")
  case AnyNonNullableNonLowCardinality extends CHAggregatedType("AnyNonNullableNonLowCardinality")
  case DateOrDateTime extends CHAggregatedType("DateOrDateTime")
  case Date32OrDateTime64 extends CHAggregatedType("Date32OrDateTime64")
  case DateLikeOrDateTime extends CHAggregatedType("DateLikeOrDateTime")
  case DateLikeOrDateTimeLike extends CHAggregatedType("DateLikeOrDateTimeLike")
  case DateLike extends CHAggregatedType("DateLike")
  case DateTimeLike extends CHAggregatedType("DateTimeLike")
  case DateTimeUnit extends CHAggregatedType("DateTimeUnit")
  case DateTime64Unit extends CHAggregatedType("DateTime64Unit")
  case Format extends CHAggregatedType("Format")
  case Geo extends CHAggregatedType("Geo")
  case GeoNoPoint extends CHAggregatedType("GeoNoPoint")
  case Integer64Like extends CHAggregatedType("Integer64Like")
  case Interval extends CHAggregatedType("Interval")
  case IntervalDate extends CHAggregatedType("IntervalDate")
  case IntervalTime extends CHAggregatedType("IntervalTime")
  case IntervalTime64 extends CHAggregatedType("IntervalTime64")
  case IntervalTimeOrTime64 extends CHAggregatedType("IntervalTimeOrTime64")
  case IP extends CHAggregatedType("IP")
  case MapKey extends CHAggregatedType("MapKey")
  case NumberOrDateLikeOrDateTimeOrInterval extends CHAggregatedType("NumberOrDateLikeOrDateTimeOrInterval")
  case StringLike extends CHAggregatedType("StringLike")
  case TimeOrTime64Unit extends CHAggregatedType("TimeOrTime64Unit")

  // Numbers
  case DecimalLike extends CHAggregatedType("DecimalLike")
  case Float extends CHAggregatedType("Float")
  case Int extends CHAggregatedType("Int")
  case IntMax16Bits extends CHAggregatedType("IntMax16Bits")
  case IntMax32Bits extends CHAggregatedType("IntMax32Bits")
  case IntMax64Bits extends CHAggregatedType("IntMax64Bits")
  case IntMax128Bits extends CHAggregatedType("IntMax128Bits")
  case NonDecimal extends CHAggregatedType("NonDecimal")
  case NonDecimalMax32Bits extends CHAggregatedType("NonDecimalMax32Bits")
  case NonDecimalMax64Bits extends CHAggregatedType("NonDecimalMax64Bits")
  case NonDecimalNorFloat extends CHAggregatedType("NonDecimalNorFloat")
  case NonDecimalNorFloatMax8Bits extends CHAggregatedType("NonDecimalNorFloatMax8Bits")
  case NonDecimalNorFloatMax16Bits extends CHAggregatedType("NonDecimalNorFloatMax16Bits")
  case NonDecimalNorFloatMax32Bits extends CHAggregatedType("NonDecimalNorFloatMax32Bits")
  case NonDecimalNorFloatMax64Bits extends CHAggregatedType("NonDecimalNorFloatMax64Bits")
  case Number extends CHAggregatedType("Number")
  case NumberMax64Bits extends CHAggregatedType("NumberMax64Bits")
  case NonFloat32Number extends CHAggregatedType("NonFloat32Number")
  case NonFloat32NorDecimalMax64Bits extends CHAggregatedType("NonFloat32NorDecimalMax64Bits")
  case NonFloat64Number extends CHAggregatedType("NonFloat64Number")
  case NonFloat64NorDecimalMax64Bits extends CHAggregatedType("NonFloat64NorDecimalMax64Bits")
  case UInt extends CHAggregatedType("UInt")
  case UIntMax16Bits extends CHAggregatedType("UIntMax16Bits")
  case UIntMax32Bits extends CHAggregatedType("UIntMax32Bits")
  case UIntMax64Bits extends CHAggregatedType("UIntMax64Bits")
  case UIntMax128Bits extends CHAggregatedType("UIntMax128Bits")
