package com.amendil.common.entities

// FIXME This list can change between ClickHouse version.
// It'd be great to retrieve it from ClickHouse on startup and use its values for fuzzing.
/**
  * Formats supported by ClickHouse
  * The code can be generated with `SELECT concat('  case ', name, ' extends CHFormat("', name, '", ', toBool(is_input), ', ', toBool(is_output), ')') FROM system.formats ORDER BY name FORMAT TSV`
  *
  * @param isInput can the format be used to send data in ClickHouse
  * @param isOutput can the format be used to retrieve data from ClickHouse
  */
enum CHFormat(val name: String, val isInput: Boolean, val isOutput: Boolean):
  case Arrow extends CHFormat("Arrow", true, true)
  case ArrowStream extends CHFormat("ArrowStream", true, true)
  case Avro extends CHFormat("Avro", true, true)
  case AvroConfluent extends CHFormat("AvroConfluent", true, false)
  case BSONEachRow extends CHFormat("BSONEachRow", true, true)
  case CSV extends CHFormat("CSV", true, true)
  case CSVWithNames extends CHFormat("CSVWithNames", true, true)
  case CSVWithNamesAndTypes extends CHFormat("CSVWithNamesAndTypes", true, true)
  case CapnProto extends CHFormat("CapnProto", true, true)
  case CustomSeparated extends CHFormat("CustomSeparated", true, true)
  case CustomSeparatedIgnoreSpaces extends CHFormat("CustomSeparatedIgnoreSpaces", true, false)
  case CustomSeparatedIgnoreSpacesWithNames extends CHFormat("CustomSeparatedIgnoreSpacesWithNames", true, false)
  case CustomSeparatedIgnoreSpacesWithNamesAndTypes
      extends CHFormat("CustomSeparatedIgnoreSpacesWithNamesAndTypes", true, false)
  case CustomSeparatedWithNames extends CHFormat("CustomSeparatedWithNames", true, true)
  case CustomSeparatedWithNamesAndTypes extends CHFormat("CustomSeparatedWithNamesAndTypes", true, true)
  case Form extends CHFormat("Form", true, false)
  case JSON extends CHFormat("JSON", true, true)
  case JSONAsObject extends CHFormat("JSONAsObject", true, false)
  case JSONAsString extends CHFormat("JSONAsString", true, false)
  case JSONColumns extends CHFormat("JSONColumns", true, true)
  case JSONColumnsWithMetadata extends CHFormat("JSONColumnsWithMetadata", true, true)
  case JSONCompact extends CHFormat("JSONCompact", true, true)
  case JSONCompactColumns extends CHFormat("JSONCompactColumns", true, true)
  case JSONCompactEachRow extends CHFormat("JSONCompactEachRow", true, true)
  case JSONCompactEachRowWithNames extends CHFormat("JSONCompactEachRowWithNames", true, true)
  case JSONCompactEachRowWithNamesAndTypes extends CHFormat("JSONCompactEachRowWithNamesAndTypes", true, true)
  case JSONCompactStrings extends CHFormat("JSONCompactStrings", false, true)
  case JSONCompactStringsEachRow extends CHFormat("JSONCompactStringsEachRow", true, true)
  case JSONCompactStringsEachRowWithNames extends CHFormat("JSONCompactStringsEachRowWithNames", true, true)
  case JSONCompactStringsEachRowWithNamesAndTypes
      extends CHFormat("JSONCompactStringsEachRowWithNamesAndTypes", true, true)
  case JSONEachRow extends CHFormat("JSONEachRow", true, true)
  case JSONEachRowWithProgress extends CHFormat("JSONEachRowWithProgress", false, true)
  case JSONLines extends CHFormat("JSONLines", true, true)
  case JSONObjectEachRow extends CHFormat("JSONObjectEachRow", true, true)
  case JSONStrings extends CHFormat("JSONStrings", false, true)
  case JSONStringsEachRow extends CHFormat("JSONStringsEachRow", true, true)
  case JSONStringsEachRowWithProgress extends CHFormat("JSONStringsEachRowWithProgress", false, true)
  case LineAsString extends CHFormat("LineAsString", true, true)
  case LineAsStringWithNames extends CHFormat("LineAsStringWithNames", false, true)
  case LineAsStringWithNamesAndTypes extends CHFormat("LineAsStringWithNamesAndTypes", false, true)
  case Markdown extends CHFormat("Markdown", false, true)
  case MsgPack extends CHFormat("MsgPack", true, true)
  case MySQLDump extends CHFormat("MySQLDump", true, false)
  case MySQLWire extends CHFormat("MySQLWire", false, true)
  case NDJSON extends CHFormat("NDJSON", true, true)
  case Native extends CHFormat("Native", true, true)
  case Npy extends CHFormat("Npy", true, true)
  case Null extends CHFormat("Null", false, true)
  case ODBCDriver2 extends CHFormat("ODBCDriver2", false, true)
  case ORC extends CHFormat("ORC", true, true)
  case One extends CHFormat("One", true, false)
  case Parquet extends CHFormat("Parquet", true, true)
  case ParquetMetadata extends CHFormat("ParquetMetadata", true, false)
  case PostgreSQLWire extends CHFormat("PostgreSQLWire", false, true)
  case Pretty extends CHFormat("Pretty", false, true)
  case PrettyCompact extends CHFormat("PrettyCompact", false, true)
  case PrettyCompactMonoBlock extends CHFormat("PrettyCompactMonoBlock", false, true)
  case PrettyCompactNoEscapes extends CHFormat("PrettyCompactNoEscapes", false, true)
  case PrettyCompactNoEscapesMonoBlock extends CHFormat("PrettyCompactNoEscapesMonoBlock", false, true)
  case PrettyJSONEachRow extends CHFormat("PrettyJSONEachRow", false, true)
  case PrettyJSONLines extends CHFormat("PrettyJSONLines", false, true)
  case PrettyMonoBlock extends CHFormat("PrettyMonoBlock", false, true)
  case PrettyNDJSON extends CHFormat("PrettyNDJSON", false, true)
  case PrettyNoEscapes extends CHFormat("PrettyNoEscapes", false, true)
  case PrettyNoEscapesMonoBlock extends CHFormat("PrettyNoEscapesMonoBlock", false, true)
  case PrettySpace extends CHFormat("PrettySpace", false, true)
  case PrettySpaceMonoBlock extends CHFormat("PrettySpaceMonoBlock", false, true)
  case PrettySpaceNoEscapes extends CHFormat("PrettySpaceNoEscapes", false, true)
  case PrettySpaceNoEscapesMonoBlock extends CHFormat("PrettySpaceNoEscapesMonoBlock", false, true)
  case Prometheus extends CHFormat("Prometheus", false, true)
  case Protobuf extends CHFormat("Protobuf", true, true)
  case ProtobufList extends CHFormat("ProtobufList", true, true)
  case ProtobufSingle extends CHFormat("ProtobufSingle", true, true)
  case Raw extends CHFormat("Raw", true, true)
  case RawBLOB extends CHFormat("RawBLOB", true, true)
  case RawWithNames extends CHFormat("RawWithNames", true, true)
  case RawWithNamesAndTypes extends CHFormat("RawWithNamesAndTypes", true, true)
  case Regexp extends CHFormat("Regexp", true, false)
  case RowBinary extends CHFormat("RowBinary", true, true)
  case RowBinaryWithDefaults extends CHFormat("RowBinaryWithDefaults", true, false)
  case RowBinaryWithNames extends CHFormat("RowBinaryWithNames", true, true)
  case RowBinaryWithNamesAndTypes extends CHFormat("RowBinaryWithNamesAndTypes", true, true)
  case SQLInsert extends CHFormat("SQLInsert", false, true)
  case TSKV extends CHFormat("TSKV", true, true)
  case TSV extends CHFormat("TSV", true, true)
  case TSVRaw extends CHFormat("TSVRaw", true, true)
  case TSVRawWithNames extends CHFormat("TSVRawWithNames", true, true)
  case TSVRawWithNamesAndTypes extends CHFormat("TSVRawWithNamesAndTypes", true, true)
  case TSVWithNames extends CHFormat("TSVWithNames", true, true)
  case TSVWithNamesAndTypes extends CHFormat("TSVWithNamesAndTypes", true, true)
  case TabSeparated extends CHFormat("TabSeparated", true, true)
  case TabSeparatedRaw extends CHFormat("TabSeparatedRaw", true, true)
  case TabSeparatedRawWithNames extends CHFormat("TabSeparatedRawWithNames", true, true)
  case TabSeparatedRawWithNamesAndTypes extends CHFormat("TabSeparatedRawWithNamesAndTypes", true, true)
  case TabSeparatedWithNames extends CHFormat("TabSeparatedWithNames", true, true)
  case TabSeparatedWithNamesAndTypes extends CHFormat("TabSeparatedWithNamesAndTypes", true, true)
  case Template extends CHFormat("Template", true, true)
  case TemplateIgnoreSpaces extends CHFormat("TemplateIgnoreSpaces", true, false)
  case Values extends CHFormat("Values", true, true)
  case Vertical extends CHFormat("Vertical", false, true)
  case XML extends CHFormat("XML", false, true)
