package com.amendil.common.entities

// FIXME This list can change between ClickHouse version.
// It'd be great to retrieve it from ClickHouse on startup and use its values for fuzzing.
// XXX How to handle parameterized types?
/**
  * Base type retrieved using `SELECT name FROM system.data_type_families WHERE empty(alias_to) ORDER BY name FORMAT TSV`
  * The code can be generated with `SELECT concat('  case ', name, ' extends CHBaseType("', name, '")') FROM system.data_type_families WHERE empty(alias_to) ORDER BY name FORMAT TSV`
  */
enum CHBaseType(val name: String):
  case AggregateFunction extends CHBaseType("AggregateFunction")
  case Array extends CHBaseType("Array")
  case Bool extends CHBaseType("Bool")
  case Date extends CHBaseType("Date")
  case Date32 extends CHBaseType("Date32")
  case DateTime extends CHBaseType("DateTime")
  case DateTime32 extends CHBaseType("DateTime32")
  case DateTime64 extends CHBaseType("DateTime64")
  case Decimal extends CHBaseType("Decimal")
  case Decimal128 extends CHBaseType("Decimal128")
  case Decimal256 extends CHBaseType("Decimal256")
  case Decimal32 extends CHBaseType("Decimal32")
  case Decimal64 extends CHBaseType("Decimal64")
  case Dynamic extends CHBaseType("Dynamic")
  case Enum extends CHBaseType("Enum")
  case Enum16 extends CHBaseType("Enum16")
  case Enum8 extends CHBaseType("Enum8")
  case FixedString extends CHBaseType("FixedString")
  case Float32 extends CHBaseType("Float32")
  case Float64 extends CHBaseType("Float64")
  case IPv4 extends CHBaseType("IPv4")
  case IPv6 extends CHBaseType("IPv6")
  case Int128 extends CHBaseType("Int128")
  case Int16 extends CHBaseType("Int16")
  case Int256 extends CHBaseType("Int256")
  case Int32 extends CHBaseType("Int32")
  case Int64 extends CHBaseType("Int64")
  case Int8 extends CHBaseType("Int8")
  case IntervalDay extends CHBaseType("IntervalDay")
  case IntervalHour extends CHBaseType("IntervalHour")
  case IntervalMicrosecond extends CHBaseType("IntervalMicrosecond")
  case IntervalMillisecond extends CHBaseType("IntervalMillisecond")
  case IntervalMinute extends CHBaseType("IntervalMinute")
  case IntervalMonth extends CHBaseType("IntervalMonth")
  case IntervalNanosecond extends CHBaseType("IntervalNanosecond")
  case IntervalQuarter extends CHBaseType("IntervalQuarter")
  case IntervalSecond extends CHBaseType("IntervalSecond")
  case IntervalWeek extends CHBaseType("IntervalWeek")
  case IntervalYear extends CHBaseType("IntervalYear")
  case JSON extends CHBaseType("JSON")
  case LowCardinality extends CHBaseType("LowCardinality")
  case Map extends CHBaseType("Map")
  case MultiPolygon extends CHBaseType("MultiPolygon")
  case Nested extends CHBaseType("Nested")
  case Nothing extends CHBaseType("Nothing")
  case Nullable extends CHBaseType("Nullable")
  case Object extends CHBaseType("Object")
  case Point extends CHBaseType("Point")
  case Polygon extends CHBaseType("Polygon")
  case Ring extends CHBaseType("Ring")
  case SimpleAggregateFunction extends CHBaseType("SimpleAggregateFunction")
  case String extends CHBaseType("String")
  case Tuple extends CHBaseType("Tuple")
  case UInt128 extends CHBaseType("UInt128")
  case UInt16 extends CHBaseType("UInt16")
  case UInt256 extends CHBaseType("UInt256")
  case UInt32 extends CHBaseType("UInt32")
  case UInt64 extends CHBaseType("UInt64")
  case UInt8 extends CHBaseType("UInt8")
  case UUID extends CHBaseType("UUID")
  // case Variant extends CHBaseType("Variant")
